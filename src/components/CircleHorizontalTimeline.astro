---
type TimelineEvent = {
  year: string;
  content: string
};

const { events = [] } = Astro.props as { events?: TimelineEvent[] };
---
<div class="timeline" id="timeline">
  {events.map((event, index) => (
    <div class={`container ${index % 2 === 0 ? 'left' : 'right'}`}>
      <div class="content">
        <h2>{event.year}</h2>
        <p>{event.content}</p>
      </div>
    </div>
  ))}
</div>

<style>
  .timeline {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
    padding: 40px 0;
  }

  .timeline::after {
    content: '';
    position: absolute;
    width: 6px;
    background-color: #ddd;
    top: 0;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
  }

  .container {
    padding: 10px 40px;
    position: relative;
    background-color: inherit;
    width: 50%;
    opacity: 0;
    transform: translateY(30px);
  }

  .left {
    left: 0;
  }

  .right {
    left: 50%;
  }

  .content {
    padding: 20px 30px;
    background-color: #fff;
    position: relative;
    border-radius: 6px;
  }

  .container::before {
    content: '';
    position: absolute;
    width: 25px;
    height: 25px;
    right: -17px;
    background-color: white;
    border: 4px solid #FF9F55;
    top: 15px;
    border-radius: 50%;
    z-index: 1;
  }

  .right::before {
    left: -17px;
    right: auto;
  }

  @media screen and (max-width: 600px) {
    .timeline::after {
      left: 31px;
    }

    .container {
      width: 100%;
      padding-left: 70px;
      padding-right: 25px;
    }

    .container::before {
      left: 60px;
      right: auto;
    }

    .right {
      left: 0%;
    }
  }

  .show {
    opacity: 1;
    transform: translateY(0);
    transition: all 0.6s ease-in-out;
  }
</style>

<script is:inline>
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('show');
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.1,
  });

  document.querySelectorAll('.container').forEach(container => {
    observer.observe(container);
  });
</script>
